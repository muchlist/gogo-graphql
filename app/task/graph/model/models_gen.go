// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"gogo-graphql/app/task/graph/models"
	"io"
	"strconv"
)

type SearchResultItem interface {
	IsSearchResultItem()
}

type ApproachDetail struct {
	ID       string                 `json:"id"`
	Content  string                 `json:"content"`
	Category ApproachDetailCategory `json:"category"`
}

type ApproachDetailInput struct {
	Content  string                 `json:"content"`
	Category ApproachDetailCategory `json:"category"`
}

type ApproachInput struct {
	Content    string                `json:"content"`
	DetailList []ApproachDetailInput `json:"detailList"`
}

type ApproachPayload struct {
	Errors   []UserError      `json:"errors"`
	Approach *models.Approach `json:"approach"`
}

// true for up-vote and false for down-vote
type ApproachVoteInput struct {
	Up bool `json:"up"`
}

type ApproachVotePayload struct {
	Errors   []UserError     `json:"errors"`
	Approach models.Approach `json:"approach"`
}

type AuthInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type TaskInput struct {
	Content   string  `json:"content"`
	Tags      *string `json:"tags"`
	IsPrivate bool    `json:"isPrivate"`
}

type TaskPayload struct {
	Errors []UserError  `json:"errors"`
	Task   *models.Task `json:"task"`
}

type User struct {
	ID       string  `json:"id"`
	Username *string `json:"username"`
	Name     string  `json:"name"`
}

type UserError struct {
	Message string `json:"message"`
}

type UserInput struct {
	Email     string  `json:"email"`
	Username  string  `json:"username"`
	Password  string  `json:"password"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type UserPayload struct {
	Errors    []UserError `json:"errors"`
	User      *User       `json:"user"`
	AuthToken *string     `json:"authToken"`
}

type ApproachDetailCategory string

const (
	ApproachDetailCategoryNote        ApproachDetailCategory = "NOTE"
	ApproachDetailCategoryExplanation ApproachDetailCategory = "EXPLANATION"
	ApproachDetailCategoryWarning     ApproachDetailCategory = "WARNING"
)

var AllApproachDetailCategory = []ApproachDetailCategory{
	ApproachDetailCategoryNote,
	ApproachDetailCategoryExplanation,
	ApproachDetailCategoryWarning,
}

func (e ApproachDetailCategory) IsValid() bool {
	switch e {
	case ApproachDetailCategoryNote, ApproachDetailCategoryExplanation, ApproachDetailCategoryWarning:
		return true
	}
	return false
}

func (e ApproachDetailCategory) String() string {
	return string(e)
}

func (e *ApproachDetailCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApproachDetailCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApproachDetailCategory", str)
	}
	return nil
}

func (e ApproachDetailCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
