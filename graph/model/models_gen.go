// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type SearchResultItem interface {
	IsSearchResultItem()
}

type Approach struct {
	ID         string            `json:"id"`
	Content    string            `json:"content"`
	Author     *User             `json:"author"`
	DetailList []*ApproachDetail `json:"detailList"`
	VoteCount  int               `json:"voteCount"`
	Task       *Task             `json:"task"`
	CreatedAt  string            `json:"createdAt"`
}

func (Approach) IsSearchResultItem() {}

type ApproachDetail struct {
	ID       string                 `json:"id"`
	Content  string                 `json:"content"`
	Category ApproachDetailCategory `json:"category"`
}

type ApproachDetailInput struct {
	Content  string                 `json:"content"`
	Category ApproachDetailCategory `json:"category"`
}

type ApproachInput struct {
	Content    string                 `json:"content"`
	DetailList []*ApproachDetailInput `json:"detailList"`
}

type ApproachPayload struct {
	Errors   []*UserError `json:"errors"`
	Approach *Approach    `json:"approach"`
}

// true for up-vote and false for down-vote
type ApproachVoteInput struct {
	Up bool `json:"up"`
}

type ApproachVotePayload struct {
	Errors   []*UserError `json:"errors"`
	Approach *Approach    `json:"approach"`
}

type AuthInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Me struct {
	ID       string  `json:"id"`
	Username *string `json:"username"`
	Name     string  `json:"name"`
	TaskList []*Task `json:"taskList"`
}

type Task struct {
	ID            string      `json:"id"`
	Content       string      `json:"content"`
	Tags          []string    `json:"tags"`
	ApproachList  []*Approach `json:"approachList"`
	ApproachCount int         `json:"approachCount"`
	Author        *User       `json:"author"`
	CreatedAt     string      `json:"createdAt"`
}

func (Task) IsSearchResultItem() {}

type TaskInput struct {
	Content   string  `json:"content"`
	Tags      *string `json:"tags"`
	IsPrivate bool    `json:"isPrivate"`
}

type TaskPayload struct {
	Errors []*UserError `json:"errors"`
	Task   *Task        `json:"task"`
}

type User struct {
	ID       string  `json:"id"`
	Username *string `json:"username"`
	Name     string  `json:"name"`
}

type UserError struct {
	Message string `json:"message"`
}

type UserInput struct {
	Email     string  `json:"email"`
	Username  string  `json:"username"`
	Password  string  `json:"password"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type UserPayload struct {
	Errors    []*UserError `json:"errors"`
	User      *User        `json:"user"`
	AuthToken *string      `json:"authToken"`
}

type ApproachDetailCategory string

const (
	ApproachDetailCategoryNote        ApproachDetailCategory = "NOTE"
	ApproachDetailCategoryExplanation ApproachDetailCategory = "EXPLANATION"
	ApproachDetailCategoryWarning     ApproachDetailCategory = "WARNING"
)

var AllApproachDetailCategory = []ApproachDetailCategory{
	ApproachDetailCategoryNote,
	ApproachDetailCategoryExplanation,
	ApproachDetailCategoryWarning,
}

func (e ApproachDetailCategory) IsValid() bool {
	switch e {
	case ApproachDetailCategoryNote, ApproachDetailCategoryExplanation, ApproachDetailCategoryWarning:
		return true
	}
	return false
}

func (e ApproachDetailCategory) String() string {
	return string(e)
}

func (e *ApproachDetailCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApproachDetailCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApproachDetailCategory", str)
	}
	return nil
}

func (e ApproachDetailCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
